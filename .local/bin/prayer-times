#!/bin/bash

# ----- Parameters ------ #
# Coordinates: https://www.mapcoordinates.net/en
lat='30.001780'
long='31.290419'
# Calculation Method: https://api.aladhan.com/v1/methods
method='5'
# Print Text Language (en/ar)
print_lang="ar"
# ----------------------- #
prayers_json="$HOME/.local/share/prayers.json"
prayers=("Fajr" "Dhuhr" "Asr" "Maghrib" "Isha")
declare -A date
declare -A epochtimes
declare -A prayers_ar
prayers_ar=(
	["Fajr"]="ÿßŸÑŸÅÿ¨ÿ±"
	["Sunrise"]="ÿßŸÑÿ¥ÿ±ŸàŸÇ"
	["Dhuhr"]="ÿßŸÑÿ∏Ÿáÿ±"
	["Asr"]="ÿßŸÑÿπÿµÿ±"
	["Maghrib"]="ÿßŸÑŸÖÿ∫ÿ±ÿ®"
	["Isha"]="ÿßŸÑÿπÿ¥ÿßÿ°"
)
date=(
	[day_idx]=$(($(date +%-d) - 1))
	[weekday]=$(date +%a)
	[month]=$(date +%-m)
	[year]=$(date +%Y)
)

nameof() {
	if [[ "$print_lang" != "en" ]]; then
		local array_name="prayers_$print_lang"
		eval "echo -n \${${array_name}[$1]}"
	else
		echo -n "$1"
	fi
}

check() {
	local available_month
	if [[ -r $prayers_json ]]; then
		available_month=$(jq -r ".data[0].date.gregorian.month.number" "$prayers_json")
	else
		local fetch_prayers=1
	fi

	if [[ "$fetch_prayers" || "$available_month" != "${date[month]}" ]]; then
		echo "-- fetching current month (${date[month]}) prayer calendar"
		# Documentation: https://aladhan.com/prayer-times-api#GetCalendar
		wget -O "$prayers_json" "http://api.aladhan.com/v1/calendar/${date[year]}/${date[month]}?latitude=$lat&longitude=$long&method=$method"
	fi
}

add-jobs() {
	local kill_cmd="kill -1 \$(ps aux | grep qatami | awk 'FNR==1{print \$2}')"

	# WARNING: THIS SCRIPTS REMOVES ALL JOBS IN QUEUE "P" SCHEDULED USING AT (ADJUST ACCORDINGLY)
	echo "-- removing all jobs in queue 'p'"
	if [[ "$(at -q p -l | wc -l)" != "0" ]]; then
		for i in $(at -q p -l | awk '{ print $1 }'); do
			atrm "$i"
		done
	fi

	for prayer in "${prayers[@]}"; do
		echo "-- creating at job for $prayer prayer"
		printf '[ "$(dunstify --icon="clock-applet-symbolic" --action="Reply,reply" "Prayer Times" "It is time for %s prayer üïå" -t 30000)" = "2" ] && %s' "$prayer" "$kill_cmd" | at -q p "$(timeof "$prayer" '%H:%M %F')"
	done
}

timeof() {
	[[ "$#" -lt "1" ]] && echo "atleast 1 argument is needed" && return 1
	echo -n "$(date -d "$(jq -r ".data[${date[day_idx]}].timings.$1" "$prayers_json")" "+${2:-%I:%M}")"
}

hijri() {
	case "$1" in
	weekday)
		if [[ "$print_lang" == "ar" ]]; then
			echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.weekday.ar" "$prayers_json")"
		else
			echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.weekday.en" "$prayers_json")"
		fi
		;;
	day)
		echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.day" "$prayers_json")"
		;;
	month)
		if [[ "$print_lang" == "ar" ]]; then
			echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.month.ar" "$prayers_json")"
		else
			echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.month.en" "$prayers_json")"
		fi
		;;
	year)
		echo -n "$(jq -r ".data[${date[day_idx]}].date.hijri.year" "$prayers_json")"
		;;
	*)
		echo "unsupported argument: $1" && return 1
		;;
	esac
}

settimes() {
	# return if array already populated
	[[ "${#epochtimes[@]}" -gt 0 ]] && return 0

	epochtimes=(
		[now]=$(date +%s)
		[fajr]=$(timeof Fajr %s)
		[dhuhr]=$(timeof Dhuhr %s)
		[asr]=$(timeof Asr %s)
		[maghrib]=$(timeof Maghrib %s)
		[isha]=$(timeof Isha %s)
	)

	if [[ ${epochtimes[now]} -ge ${epochtimes[fajr]} && ${epochtimes[now]} -lt ${epochtimes[dhuhr]} ]]; then
		epochtimes[next]=${epochtimes[dhuhr]}
		currentprayer="Fajr"
		if [[ "${date[weekday]}" == "Fri" ]]; then
			nextprayer="Jumuaa"
		else
			nextprayer="Dhuhr"
		fi

	elif [[ ${epochtimes[now]} -ge ${epochtimes[dhuhr]} && ${epochtimes[now]} -lt ${epochtimes[asr]} ]]; then
		epochtimes[next]=${epochtimes[asr]}
		currentprayer="Dhuhr"
		nextprayer="Asr"

	elif [[ ${epochtimes[now]} -ge ${epochtimes[asr]} && ${epochtimes[now]} -lt ${epochtimes[maghrib]} ]]; then
		epochtimes[next]=${epochtimes[maghrib]}
		currentprayer="Asr"
		nextprayer="Maghrib"

	elif [[ ${epochtimes[now]} -ge ${epochtimes[maghrib]} && ${epochtimes[now]} -lt ${epochtimes[isha]} ]]; then
		epochtimes[next]=${epochtimes[isha]}
		currentprayer="Maghrib"
		nextprayer="Isha"

	elif [[ ${epochtimes[now]} -ge ${epochtimes[isha]} || ${epochtimes[now]} -lt ${epochtimes[fajr]} ]]; then
		epochtimes[next]=${epochtimes[fajr]}
		currentprayer="Isha"
		nextprayer="Fajr"
	fi
}

print() {
	local format="üìÖ %sÿå%s\n%-12s%-10s\n%-12s%-10s\n%-12s%-10s\n%-12s%-10s\n%-12s%-10s\n%-12s%-10s\n"
	if [[ "$print_lang" == "ar" ]]; then
		format="üìÖ %sÿå%s\n%s%11s\n%s%10s\n%s%11s\n%s%11s\n%s%10s\n%s%10s\n"
	fi

	printf "$format" \
		"$(hijri weekday)" \
		"$(hijri day)-$(hijri month)-$(hijri year)" \
		"€û $(nameof Fajr)" "$(timeof Fajr)" \
		"€û $(nameof Sunrise)" "$(timeof Sunrise)" \
		"€û $(nameof Dhuhr)" "$(timeof Dhuhr)" \
		"€û $(nameof Asr)" "$(timeof Asr)" \
		"€û $(nameof Maghrib)" "$(timeof Maghrib)" \
		"€û $(nameof Isha)" "$(timeof Isha)"
}

yad-en() {
	yad \
		--text-width=10 \
		--on-top \
		--text \
		"<span font-size='large'><b>üìÖ $(hijri weekday),$(hijri day)-$(hijri month)-$(hijri year)</b></span>" \
		--list \
		--width=250 \
		--height=240 \
		--title="Prayers" \
		--column="Prayer" \
		--column="Time" \
		--expand-column=1 \
		--no-buttons \
		--no-click \
		--no-selection \
		"<span font-size='large'>€û $(nameof Fajr)</span>" "<span font-size='large'>$(timeof Fajr)</span>" \
		"<span font-size='large'>€û $(nameof Sunrise)</span>" "<span font-size='large'>$(timeof Sunrise)</span>" \
		"<span font-size='large'>€û $(nameof Dhuhr)</span>" "<span font-size='large'>$(timeof Dhuhr)</span>" \
		"<span font-size='large'>€û $(nameof Asr)</span>" "<span font-size='large'>$(timeof Asr)</span>" \
		"<span font-size='large'>€û $(nameof Maghrib)</span>" "<span font-size='large'>$(timeof Maghrib)</span>" \
		"<span font-size='large'>€û $(nameof Isha)</span>" "<span font-size='large'>$(timeof Isha)</span>"
}

yad-ar() {
	yad \
		--text-width=10 \
		--on-top \
		--text-align='right' \
		--text \
		"<span font-size='large'><b>üìÖ $(hijri weekday),$(hijri day)-$(hijri month)-$(hijri year)</b></span>" \
		--list \
		--width=250 \
		--height=240 \
		--title="Prayers" \
		--column="ÿßŸÑŸàŸÇÿ™" \
		--column="ÿßŸÑÿµŸÑÿßÿ©" \
		--expand-column=1 \
		--no-buttons \
		--no-click \
		--no-selection \
		"<span font-size='large'>$(timeof Fajr)</span>" "<span font-size='large'>$(nameof Fajr)</span>" \
		"<span font-size='large'>$(timeof Sunrise)</span>" "<span font-size='large'>$(nameof Sunrise)</span>" \
		"<span font-size='large'>$(timeof Dhuhr)</span>" "<span font-size='large'>$(nameof Dhuhr)</span>" \
		"<span font-size='large'>$(timeof Asr)</span>" "<span font-size='large'>$(nameof Asr)</span>" \
		"<span font-size='large'>$(timeof Maghrib)</span>" "<span font-size='large'>$(nameof Maghrib)</span>" \
		"<span font-size='large'>$(timeof Isha)</span>" "<span font-size='large'>$(nameof Isha)</span>"
}

yad-toggle() {
	if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
		yad_pid=$(xprop _NET_WM_PID -name Prayers 2>/dev/null | awk '{print $3}')
	elif [[ "$XDG_CURRENT_DESKTOP" == "Hyprland" ]]; then
		yad_pid=$(hyprctl clients | awk '/title: Prayers/ {found=1} found && $0 ~ /pid/ {print $2}')
	fi

	if [[ -z "$yad_pid" ]]; then
		eval "yad-$print_lang"
	else
		kill "$yad_pid"
	fi
}

current() {
	settimes
	echo "$currentprayer"
}

next() {
	settimes
	echo "$nextprayer"
}

remaining() {
	settimes
	local remain
	remain=$(date -u -d "@$((epochtimes[next] - epochtimes[now]))" "+%H:%M:%S")
	echo "$remain"
}

status() {
	settimes
	local remain
	remain=$(date -u -d "@$((epochtimes[next] - epochtimes[now]))" "+%H:%M")
	local next_text="$nextprayer in $remain"
	echo "$next_text"
}

waybar-status() {
	settimes
	local remain
	remain=$(date -u -d "@$((epochtimes[next] - epochtimes[now]))" "+%H:%M")
	local next_text="$nextprayer in $remain"
	printf '{ "text": "%s", "class": "%s" }' "$next_text" "$nextprayer"
}

case "$1" in
check)
	check
	;;
jobs)
	add-jobs
	;;
sync)
	check
	add-jobs
	;;
print)
	print
	;;
current)
	current
	;;
next)
	next
	;;
remaining)
	remaining
	;;
status)
	status
	;;
yad)
	yad-toggle
	;;
waybar)
	waybar-status
	;;
*)
	echo "Usage: $(basename "$0") [command]"
	echo "Command:"
	echo "  check      Check if prayer time data needs to be fetched"
	echo "  jobs       Add prayer time notifications as at jobs"
	echo "  sync       Check and sync prayer time data, and add notifications"
	echo "  print      Print prayer times"
	echo "  current    Get the current prayer"
	echo "  next       Get the next prayer"
	echo "  remaining  Get the remaining time for the next prayer"
	echo "  status     Get the status message indicating the next prayer"
	echo "  yad        Toggle the yad window showing prayer times"
	echo "  waybar     Print waybar JSON-formatted status"
	exit 1
	;;
esac
